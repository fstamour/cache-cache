
* Tasks

** TODO [#A] Unhandled USOCKET:NS-TRY-AGAIN-ERROR
Unhandled USOCKET:NS-TRY-AGAIN-ERROR in thread #<SB-THREAD:THREAD
tid=434578 "Cron CACHE-CACHE::UPDATE-ISSUES

** DONE Add a readme
** TODO [#A] Add a test system
** TODO Make stuff thread-safe

See sbcl-concurrent-hash-tables or luckless

** TODO Update projects periodically
** TODO Get all epics
** TODO Get all labels

Could be inferred from the issues

** TODO Keep a "recently viewed" list

It would be nice if that list was persistant.

** TODO Yack-shaving: use websocket to update the page (without losing
the state) when we update a component.
** TODO Use dexador instead of drakma
** TODO Save issues to disk
** TODO Show the issues' project
** TODO show swank or slynk's port in the web interface

** TODO Once there's a command line, add proper command line completion

- https://web.archive.org/web/20221128005416/https://dev.to/rsteube/a-pragmatic-approach-to-shell-completion-4gp0
- https://github.com/rsteube/carapace-bin

* Resources:

- [[https://edicl.github.io/hunchentoot/][hunchentoot's manual]]
- [[https://local-time.common-lisp.dev/manual.html][local-time's manual]]

** Indexing with montezuma

- https://github.com/sharplispers/montezuma/blob/master/TUTORIAL.md
- https://github.com/sharplispers/montezuma/blob/master/tests/corpora/pastes-1000/paste-search.lisp

** Fuzzy match

https://github.com/vindarel/fuzzy-match

** Parenscript

- [[https://parenscript.common-lisp.dev/][homepage]]
- [[https://parenscript.common-lisp.dev/][manual]]

** Pagefind API

> MIT Licence - Copyright 2022 CloudCannon

https://pagefind.app/docs/api/

#+begin_quote
{
  /* ... other result keys ... */
  "url": "/url-of-the-page/",
  "excerpt": "A small snippet of the <mark>static</mark> content, with the search term(s) highlighted in &lt;mark&gt; elements.",
  "meta": {
    "title": "The title from the first h1 element on the page",
    "image": "/weka.png"
  },
  "sub_results": [
    {
        /* ... other sub_result keys ... */
        "title": "The title from the first h1 element on the page",
        "url": "/url-of-the-page/",
        "excerpt": "A small snippet of the <mark>static</mark> content, with the search term(s) highlighted in &lt;mark&gt; elements",
    },
    {
        /* ... other sub_result keys ... */
        "title": "Inner text of some heading",
        "url": "/url-of-the-page/#id-of-the-h2",
        "excerpt": "A snippet of the <mark>static</mark> content, scoped between this anchor and the next one",
    }
  ]
}
#+end_quote

* Handling multiple sources of data
> The ultimate yak-shaving

** Motivation

"Even more yak-shaving"

I've been using this project for a long while to help me find issues
and projects in GitLab very quickly. But I want more.

- First of all, I want to add "epics", but I don't want to duplicate
even more code as it is.
- I would like to add GitHub too
- I would like to search the contents, not just the title
- I want actual indexes (see [[file:scratch-files/indexing.lisp][prototype]])
- I want to index local files (e.g. find and grep -R)
- I want to index local repositories (I should try hound-search
  before, I haven't used it since 2017...)
- I want to support multiple GitLab instances (I currently have at
  least 3)
- I want to (optionally) include personal projects.
- I want to search quicklisp and/or specific references, like clhs,
  Alexandria, serapeum, uiop, asdf, etc...
  - https://github.com/Zulu-Inuoe/jzon/
  - https://github.com/ruricolist/serapeum/blob/master/REFERENCE.md
- I want to search guix...
  - other package managers: pypi, nix, npm, Debian's, Ubuntu's,
    docker.io...
- github' gists

** Plan

- I'll use CLOS
- I want to take advantage of serapeum for once
- I need to figure out which generic method I need
- I need to figure out the nomenclature, but "source" is a good
  start... I could look at how magit-forge, elasticsearch, splunk, and
  hound-search for inspirations
- How will I handle the configuration? Json sounds nice, but lisp too :P

* Do more than just caching/searching

"The ultimate yak-shaving"

I would like to do more stuff with the things I have cached
- mark as TODO
- mark as favourites
- add links between items
  - especially those that can't be linked easily, like linking 2
    projects
  - Be able to add a note describing the link (you just can't do that
    in GitLab)
- add local-only comments on items
  - put them in an org-mode file!?
- automated tasks?
  - useful for things that can take a while to index

* Terminology Brainstorm

** Current terminology

| source |
| items  |
| topics |

*** TODO Use "fetch" instead of "get"

** From ElasticSearch/LogStash

*** Data structure

| term                   | definition                                                 |
|------------------------+------------------------------------------------------------|
| alias                  | Secondary name for a group of data streams or indices      |
| document               | JSON                                                       |
| index                  | Collection of documents                                    |
| dataset                | A homogenous set collection of data                        |
| event                  | Timestamped data                                           |
| field reference        | A reference to an event field.                             |
| field                  | Key-value pair in a document OR an event property          |
| filter                 | Query that doesn't score                                   |
| id                     |                                                            |
| index pattern          | glob for index names                                       |
| data stream            | ~ index for time series?  no, not only time series         |
| index template         |                                                            |
| runtime/scripted field |                                                            |
| saved search           |                                                            |
| computed field         | that one is from me, not ELK                               |
| search session         | caching search results                                     |
| search template        |                                                            |
| snapshot               |                                                            |
| segment                |                                                            |
| source field           |                                                            |
| system index           |                                                            |
| tag                    | A keyword or label that you assign to Kibana saved objects |
| term                   |                                                            |
| token                  |                                                            |
| workpad                |                                                            |
| scratchpad             | that one is from me, not ELK                               |

*** Data processing

| term           | definition                                                      |
|----------------+-----------------------------------------------------------------|
| action         | what to do when a rule fires. a rule can have multiple actions. |
| condition      |                                                                 |
| rule           |                                                                 |
| ingestion      | process of collecting data from data sources into ELK           |
| pipeline       | "flow of event"   input -> filters -> output                    |
| codec          |                                                                 |
| broker         |                                                                 |
| message broker |                                                                 |
| aggregation    |                                                                 |
| monitor        |                                                                 |
| buffer         |                                                                 |
| queue          |                                                                 |
| query          |                                                                 |
| lifecycle      |                                                                 |
| [term] join    |                                                                 |
| watcher        |                                                                 |
| worker         | that one is from me, not ELK                                    |
| mapping        |                                                                 |

*** Other

| data source  |                                                                |
| data view    |                                                                |
| datafeed     |                                                                |
| endpoint     |                                                                |
| input        | logstash's data source?                                        |
| output       | a pipeline's destination?                                      |
| flush        |                                                                |
| merge        |                                                                |
| jobs         |                                                                |
| lens         |                                                                |
| query syntax |                                                                |
| namespace    |                                                                |
| plan         | refers to the architecture, but I had terraform's plan in mind |
| roolup       |                                                                |
| connector    |                                                                |
| data tier    | hot/warm/cold etc                                              |

*** Clustering stuff

| cluser |
| node   |
| shard  |


* References

- Youtube API - https://developers.google.com/youtube/v3/docs
- https://gitlab.com/-/graphql-explorer
